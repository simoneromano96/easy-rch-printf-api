package main

import (
	"bytes"
	"encoding/gob"
	"fmt"
	"log"

	fiberSwagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/nats-io/nats.go"
	"github.com/spf13/viper"

	// docs are generated by Swag CLI, you have to import them.
	_ "simoneromano96/easy-rch-printf-api/docs"
)

// var natsClient *nats.Conn
var jetStreamContext nats.JetStreamContext
var natsChannelName string

// Config
type Config struct {
	NATSUrl        string `mapstructure:"NATS_URL"`
	NATSStreamName string `mapstructure:"NATS_STREAM_NAME"`
	NATSSubject    string `mapstructure:"NATS_SUBJECT"`
	ListenAt       string `mapstructure:"LISTEN_AT"`
}

func loadConfig() (config Config, err error) {
	viper.AddConfigPath("environment")
	viper.SetConfigName("development")
	viper.SetConfigType("yaml")

	viper.AutomaticEnv()

	err = viper.ReadInConfig()
	if err != nil {
		return
	}

	err = viper.Unmarshal(&config)
	return
}

// RCH Request to be sent
type Service struct {
	// The actual command
	Commands []string `xml:"cmd"`
}

// A Product
type Product struct {
	Name     string  `json:"name" validate:"required"`
	Price    float64 `json:"price" validate:"required,gt=0"`
	Quantity int     `json:"quantity" validate:"required,gt=0"`
}

// PrintOrder struct to describe something that must be printed.
type PrintOrder struct {
	Products []Product `json:"products" validate:"required"`
}

// PostPrintOrder func create new print order.
// @Description Creates a new print order.
// @Summary Creates a new print order.
// @Accept json
// @Param printOrder body PrintOrder true "New print order."
// @Produce json
// @Success 200 {object} PrintOrder
// @Router /new-order [post]
func PostPrintOrder(c *fiber.Ctx) error {
	// Create new Print Order struct
	printOrder := &PrintOrder{}

	// Check, if received JSON data is valid.
	if err := c.BodyParser(printOrder); err != nil {
		// Return status 400 and error message.
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": true,
			"msg":   err.Error(),
		})
	}

	var rchCommands []string

	// Foreach product create a new command line
	for i, product := range printOrder.Products {
		newPrice := product.Price * 100
		command := fmt.Sprintf("=R%d/$%.0f/*%d/(%s)", i, newPrice, product.Quantity, product.Name)
		rchCommands = append(rchCommands, command)
	}
	// Add terminal command
	rchCommands = append(rchCommands, "=T1")

	fmt.Println(rchCommands)

	// Create final request
	rchRequest := Service{Commands: rchCommands}

	// Initialize the encoder
	var buffer bytes.Buffer
	// Write to buffer
	enc := gob.NewEncoder(&buffer)

	err := enc.Encode(rchRequest)
	if err != nil {
		// Return status 500 and error message.
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": true,
			"msg":   err.Error(),
		})
	}

	// Publish bytes
	_, err = jetStreamContext.Publish(natsChannelName, buffer.Bytes())
	// fmt.Println(buffer.Bytes())

	if err != nil {
		// Return status 500 and error message.
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": true,
			"msg":   err.Error(),
		})
	}

	// Everything went ok
	return c.JSON(printOrder)
}

// @title Easy RCH PrintF! API
// @version 1.0
// @description Human and developer friendly API for the RCH Printer.
// @license.name MIT
// @BasePath /
func main() {
	config, err := loadConfig()
	if err != nil {
		log.Fatal("cannot load config:", err)
	}

	fmt.Println(config)
	natsChannelName = fmt.Sprintf("%s.%s", config.NATSStreamName, config.NATSSubject)

	// Connect to NATS
	nc, err := nats.Connect(config.NATSUrl)
	if err != nil {
		panic(err)
	}

	// Create JetStream Context
	js, err := nc.JetStream(nats.PublishAsyncMaxPending(1024))
	if err != nil {
		panic(err)
	}

	jetStreamContext = js

	app := fiber.New()

	// Middlewares
	app.Use(logger.New())

	// Routes
	app.Post("/new-order", PostPrintOrder)
	app.Get("/swagger/*", fiberSwagger.Handler)

	log.Fatal(app.Listen(config.ListenAt))
}
